name: Deploy Next.js to GitHub Pages

on:
  push:
    branches:
      - main

# Minimal required permissions for GitHub Pages deployment
permissions:
  contents: read      # Required to checkout repository code
  pages: write        # Required to deploy to GitHub Pages
  id-token: write     # Required for OIDC token authentication

# Ensure only one deployment runs at a time for security
concurrency:
  group: "pages-${{ github.ref }}"
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: package-lock.json
          
      - name: Cache Next.js build
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            ${{ github.workspace }}/.next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-
            ${{ runner.os }}-nextjs-
          
      - name: Validate environment security
        run: |
          echo "Validating environment configuration..."
          # Ensure NODE_ENV is properly set for production build
          export NODE_ENV=production
          echo "NODE_ENV set to: $NODE_ENV"
          # Verify no sensitive environment variables are exposed
          env | grep -E "(TOKEN|SECRET|KEY|PASSWORD)" || echo "No sensitive environment variables detected"
          
      - name: Install dependencies
        run: |
          npm ci --prefer-offline --no-audit --no-fund
        
      - name: Build
        run: npm run build
        
      - name: Validate build output security
        run: |
          # Check that no sensitive files are included in build output
          if [ -d "out" ]; then
            echo "Validating build output for security..."
            # Check for common sensitive file patterns
            find out -name "*.env*" -o -name "*.key" -o -name "*.pem" -o -name "*.p12" -o -name "*.pfx" | while read file; do
              echo "WARNING: Potentially sensitive file found: $file"
              exit 1
            done
            # Check for common secret patterns in files
            if grep -r -i "password\|secret\|token\|api[_-]key" out/ --include="*.js" --include="*.html" --include="*.json" | grep -v "placeholder\|example\|demo"; then
              echo "WARNING: Potential secrets found in build output"
              exit 1
            fi
            echo "Build output security validation passed"
          else
            echo "ERROR: Build output directory 'out' not found"
            exit 1
          fi
        
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: out

  deploy:
    # Use GitHub Pages environment for secure deployment
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    timeout-minutes: 5
    # Inherit permissions from workflow level for secure token handling
    permissions:
      pages: write
      id-token: write
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        # Uses GITHUB_TOKEN automatically via OIDC authentication
